name: AWS CI/CD Pipeline

on:
  push:
    branches: [ "aws_deploy" ]   # ‚úÖ Run everything only on aws_deploy branch

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r 01_cicd_pipeline/requirements.txt
          pip install pytest flake8

      - name: Lint code
        run: flake8 . --select=E9,F63,F7,F82 --show-source --statistics

      - name: Run unit tests
        run: pytest -v tests/

  train:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - run: |
          python -m pip install --upgrade pip
          pip install -r 01_cicd_pipeline/requirements.txt
      - run: python 01_cicd_pipeline/train.py
      - uses: actions/upload-artifact@v4
        with:
          name: trained-model
          path: artifacts/model.pkl

  smoke-test:
    runs-on: ubuntu-latest
    needs: train
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: trained-model
          path: 02_docker_fastapi/
      - run: docker build -t mlops-model:test 02_docker_fastapi
      - run: docker run -d -p 8000:8000 --name test_container mlops-model:test
      - run: |
          sleep 5
          curl -X POST "http://localhost:8000/predict" \
            -H "Content-Type: application/json" \
            -d '{"features":[5.1,3.5,1.4,0.2]}'
      - run: docker rm -f test_container

  deploy_aws:
    runs-on: ubuntu-latest
    needs: smoke-test
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Download trained model
        uses: actions/download-artifact@v4
        with:
          name: trained-model
          path: 02_docker_fastapi/

      - name: Build Docker image
        run: docker build -t mlops-model:latest 02_docker_fastapi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Push image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: mlops-model
        run: |
          docker tag mlops-model:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Update ECS Service
        run: |
          aws ecs update-service \
            --cluster mlops-cluster \
            --service mlops-service \
            --force-new-deployment

      - name: Wait for task to start
        run: |
          echo "‚è≥ Waiting 60s for ECS task to start..."
          sleep 60

      - name: Get Public IP of ECS Task
        run: |
          TASK_ARN=$(aws ecs list-tasks \
            --cluster mlops-cluster \
            --service-name mlops-service \
            --query "taskArns[0]" --output text)

          PUBLIC_IP=$(aws ecs describe-tasks \
            --cluster mlops-cluster \
            --tasks $TASK_ARN \
            --query "tasks[0].attachments[0].details[?name=='publicIPv4Address'].value" \
            --output text)

          echo "‚úÖ ECS Task Public IP: $PUBLIC_IP"
          echo "üåç Test your API at: http://$PUBLIC_IP:8000/predict"